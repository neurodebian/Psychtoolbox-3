#!/bin/bash
#emacs: -*- mode: shell-script; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t -*- 
#ex: set sts=4 ts=4 sw=4 noet:
#-------------------------- =+- Shell script -+= --------------------------
#
# @file      run_tests.sh
# @date      Tue Aug  9 19:18:57 2011
# @brief
#
#
#  Yaroslav Halchenko                                            Dartmouth
#  web:     http://www.onerussian.com                              College
#  e-mail:  yoh@onerussian.com                              ICQ#: 60653192
#
# DESCRIPTION (NOTES):
#
#    Little helper script to check either tests/demos
#
# COPYRIGHT: Yaroslav Halchenko 2011
#
# LICENSE: MIT
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
#-----------------\____________________________________/------------------

set -u

verbose=1

out=build/tests_output_`date +"20%y%m%d%H%M%S"`
mkdir -p "$out"
echo "I: Storing logs and output under $out"

basedir=$PWD
out=$PWD/$out					# make it full path


XVFB_OPTS="-screen 0 1024x768x24 -ac +extension GLX +render -noreset"
PATH_CMDS="addpath (genpath ('$PWD/Psychtoolbox')); addpath('$PWD/Psychtoolbox/PsychBasic/Octave3LinuxFiles/');"

failed=
{
	for f in "$@"; do
		# Set time limit depending on either it is a test or a demo
		[[ $f =~ PsychTests ]] && timelimit=30 || timelimit=15

		timeescape=$(($timelimit - 5))
		timelimitkill=$(($timelimit + 5))

		echo -n "I: $f: ";
		fbase=$(basename $f)
		fdir=$(dirname $f)
		outlog="$out/${fbase%.*}.log"

		# if it is a function -- eval it, otherwise run the script
		if true; then # grep -v '^[% ]*$' $f | head -1 | grep -q -e '^ *function'; then
			test="${fbase%.m}"
			# cd to the test's directory since it might needs some of
			# local files there
			cd $fdir
			xvfb-run --auto-servernum --server-num=20 -s "$XVFB_OPTS" \
			bash -c "( sleep $timeescape; xdotool key Escape; ) & \
				timeout --kill-after=$timelimitkill $timelimit \
				octave -q --eval \"$PATH_CMDS; PsychTweak('PrepareForVirtualMachine'); $test\" >| $outlog 2>&1"
			rv=$?
			cd "$basedir"
		else
			# just run it then
			# XXX -- TODO
			#timeout --kill-after=$timelimitkill $timelimit \
			#	octave -q $f >| $outlog 2>&1
			echo -n "I: Skipping since it is not a function "
			rv=123
		fi
		# time to kill our xdotool
		#kill %1 &>/dev/null || :
		if   [ $rv = 124 ]; then st='TIMEOUT';
		elif [ $rv = 123 ]; then st='SKIPPED';
		elif [ $rv = 0 ];   then st='OK';
		else
			fout="`grep -v octave-core $outlog | tail -1`"; st="E: FAILED $fout";
			[ x"$verbose" = x ] || { echo; sed -e 's,^,  D: ,g' $outlog; }
			echo $f >> $out/failed.log
		fi
		echo $st
	done;
} | tee $out.log

if [ -e $out/failed.log ]; then
	echo "I: We are failing since following tests failed:"
	cat $out/failed.log
	echo "I: see full log at $out.log"
	exit 1
fi
